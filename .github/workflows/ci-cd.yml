name: MLOps Pipeline CI/CD

on:
  push:
    branches: [main, develop, prod]
    paths:
      - 'airflow/**'
      - 'lambda_function/**'
      - 'mlflow/**'
      - 'infra/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main, prod]
    paths:
      - 'airflow/**'
      - 'lambda_function/**'
      - 'mlflow/**'
      - 'infra/**'
      - '.github/workflows/**'

env:
  AWS_REGION: eu-north-1
  PROJECT_NAME: mlops-taxi-prediction

jobs:
  # Job 1: Code Quality and Testing
  test-and-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint pytest black isort
          if [ -f airflow/requirements.txt ]; then pip install -r airflow/requirements.txt; fi
          if [ -f lambda_function/requirements.txt ]; then pip install -r lambda_function/requirements.txt; fi
          if [ -f mlflow/requirements.txt ]; then pip install -r mlflow/requirements.txt; fi

      - name: Code Formatting Check (Black)
        run: |
          black --check --diff airflow/ lambda_function/ scripts/ || true

      - name: Import Sorting Check (isort)
        run: |
          isort --check-only --diff airflow/ lambda_function/ scripts/ || true

      - name: Lint Code (Pylint)
        run: |
          pylint airflow/ lambda_function/ scripts/ || true

      - name: Run Tests
        run: |
          if [ -d tests ]; then
            python -m pytest tests/ -v || true
          else
            echo "No tests directory found - skipping tests"
          fi

  # Job 2: Infrastructure Validation
  terraform-validate:
    runs-on: ubuntu-latest
    needs: test-and-lint
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 1200

      - name: Terraform Format Check
        working-directory: ./infra
        run: terraform fmt -check -recursive

      - name: Terraform Init
        working-directory: ./infra
        run: terraform init

      - name: Terraform Validate
        working-directory: ./infra
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./infra
        run: terraform plan -no-color
        continue-on-error: true

  # Job 3: Build and Push Docker Images
  build-and-push:
    runs-on: ubuntu-latest
    needs: [test-and-lint, terraform-validate]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/prod'
    strategy:
      matrix:
        service: [airflow, mlflow, lambda]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 1200

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set Environment Variables
        run: |
          echo "REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=v$(date +%Y%m%d)-${GITHUB_SHA::8}" >> $GITHUB_ENV
          if [ "${{ github.ref }}" == "refs/heads/prod" ]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
            echo "REPOSITORY=${{ env.PROJECT_NAME }}-${{ matrix.service }}-app-prod" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
            echo "REPOSITORY=${{ env.PROJECT_NAME }}-${{ matrix.service }}-app-dev" >> $GITHUB_ENV
          fi

      - name: Build and Push Docker Image - Airflow
        if: matrix.service == 'airflow'
        uses: docker/build-push-action@v5
        with:
          context: ./airflow
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:latest

      - name: Build and Push Docker Image - MLflow
        if: matrix.service == 'mlflow'
        uses: docker/build-push-action@v5
        with:
          context: ./mlflow
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:latest

      - name: Build and Push Docker Image - Lambda
        if: matrix.service == 'lambda'
        uses: docker/build-push-action@v5
        with:
          context: ./lambda_function
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:latest

      - name: Run Security Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy Scan Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # Job 4: Deploy Development (on main branch)
  deploy-development:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    environment: development
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 1200

      # Deploy infrastructure if needed
      - name: Terraform Init
        working-directory: ./infra
        run: terraform init

      - name: Terraform Plan
        working-directory: ./infra
        run: |
          terraform plan -out=tfplan \
            -var="environment=dev"

      - name: Terraform Apply
        working-directory: ./infra
        run: terraform apply -auto-approve tfplan

      - name: Run Health Checks
        run: |
          # Get ALB DNS name from Terraform output
          ALB_DNS=$(cd infra && terraform output -raw alb_dns_name)
          echo "Testing Airflow UI..."
          curl -f -s -o /dev/null "http://${ALB_DNS}/" || echo "Airflow health check failed"
          echo "Testing MLflow UI..."
          curl -f -s -o /dev/null "http://${ALB_DNS}/mlflow/" || echo "MLflow health check failed"

      - name: Output Deployment Info
        working-directory: ./infra
        run: |
          echo "### Development Deployment Complete ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Services:**" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Airflow API Server & Scheduler" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… MLflow Server" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Access URLs:**" >> $GITHUB_STEP_SUMMARY
          ALB_DNS=$(terraform output -raw alb_dns_name)
          echo "- Airflow UI: http://${ALB_DNS}/" >> $GITHUB_STEP_SUMMARY
          echo "- MLflow UI: http://${ALB_DNS}/mlflow/" >> $GITHUB_STEP_SUMMARY

  # Job 5: Deploy Production (on prod branch only)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/prod'
    environment: production
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 1200

      - name: Terraform Init
        working-directory: ./infra
        run: terraform init

      - name: Terraform Plan
        working-directory: ./infra
        run: |
          terraform plan -out=tfplan \
            -var="environment=prod" \
            -var="airflow_db_password=${{ secrets.AIRFLOW_DB_PASSWORD }}"

      - name: Terraform Apply
        working-directory: ./infra
        run: terraform apply -auto-approve tfplan

      - name: Update ECS Services
        run: |
          aws ecs update-service \
            --cluster ${{ env.PROJECT_NAME }}-cluster-prod \
            --service ${{ env.PROJECT_NAME }}-airflow-prod \
            --force-new-deployment
          
          aws ecs update-service \
            --cluster ${{ env.PROJECT_NAME }}-cluster-prod \
            --service ${{ env.PROJECT_NAME }}-mlflow-prod \
            --force-new-deployment

      - name: Wait for Services to Stabilize
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.PROJECT_NAME }}-cluster-prod \
            --services ${{ env.PROJECT_NAME }}-airflow-prod ${{ env.PROJECT_NAME }}-mlflow-prod

      - name: Run Production Health Checks
        run: |
          ALB_DNS=$(cd infra && terraform output -raw alb_dns_name)
          curl -f -s -o /dev/null "http://${ALB_DNS}/" && echo "âœ… Airflow health check passed"
          curl -f -s -o /dev/null "http://${ALB_DNS}/mlflow/" && echo "âœ… MLflow health check passed"

      - name: Output Production Deployment Info
        working-directory: ./infra
        run: |
          echo "### Production Deployment Complete âœ…" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Services Updated:**" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Airflow (Production)" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… MLflow (Production)" >> $GITHUB_STEP_SUMMARY
